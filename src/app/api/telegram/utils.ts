/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
 */

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –æ—Ç BotFather –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç)
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramMessage(message: string): Promise<{ success: boolean; error?: string }> {
  try {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram (TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID)');
    }

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
 * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ Base64 –¥–∞–Ω–Ω—ã–µ
 * @param caption –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramPhoto(
  imageUrl: string,
  caption: string
): Promise<{ success: boolean; error?: string }> {
  try {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram (TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID)');
    }

    let formData;
    const isBase64 = imageUrl.startsWith('data:');
    
    if (isBase64) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const base64Data = imageUrl.split(',')[1];
      const mimeType = imageUrl.split(';')[0].split(':')[1];
      const binaryData = Buffer.from(base64Data, 'base64');
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–¥–∞—Ç—É —Å —Ñ–∞–π–ª–æ–º
      formData = new FormData();
      const blob = new Blob([binaryData], { type: mimeType });
      formData.append('photo', blob, 'photo.jpg');
      formData.append('chat_id', TELEGRAM_CHAT_ID);
      formData.append('parse_mode', 'HTML');
      formData.append('caption', caption);
    }

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;
    
    const response = await fetch(url, {
      method: 'POST',
      body: isBase64 
        ? formData 
        : JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            photo: imageUrl, // –í–Ω–µ—à–Ω–∏–π URL –¥–ª—è —Ñ–æ—Ç–æ
            parse_mode: 'HTML',
            caption
          }),
      headers: isBase64 
        ? undefined 
        : {
            'Content-Type': 'application/json',
          }
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–µ—á–∞—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 */
export function formatCustomPrintMessage(data: {
  name: string;
  contact: string;
  phone: string;
  message: string;
  hasAttachment?: boolean;
}): string {
  return `
<b>üé® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø–µ—á–∞—Ç—å</b>

<b>–ò–º—è:</b> ${data.name}
<b>–ö–æ–Ω—Ç–∞–∫—Ç (Telegram/WhatsApp):</b> ${data.contact}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${data.message}
${data.hasAttachment ? '\n<b>‚úÖ –ö –∑–∞—è–≤–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>' : ''}

<i>‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</i>
`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 */
export function formatOrderMessage(data: {
  orderItems: Array<{
    productName: string;
    price: number;
    quantity: number;
    size?: string;
    color?: string;
  }>;
  totalPrice: number;
  customerInfo: {
    name: string;
    contact: string;
    phone: string;
  };
}): string {
  const { orderItems, totalPrice, customerInfo } = data;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  const itemsText = orderItems.map(item => {
    return `- ${item.productName} ${item.size ? `(–†–∞–∑–º–µ—Ä: ${item.size})` : ''} ${item.color ? `(–¶–≤–µ—Ç: ${item.color})` : ''} - ${item.quantity} —à—Ç. x ${formatPrice(item.price)} = ${formatPrice(item.price * item.quantity)}`;
  }).join('\n');
  
  return `
<b>üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

<b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>
${itemsText}

<b>–ò—Ç–æ–≥–æ:</b> ${formatPrice(totalPrice)}

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>
<b>–ò–º—è:</b> ${customerInfo.name}
<b>–ö–æ–Ω—Ç–∞–∫—Ç (Telegram/WhatsApp):</b> ${customerInfo.contact}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${customerInfo.phone}

<i>‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.</i>
`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —Å–æ–º–∞—Ö
 */
function formatPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'KGS',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
} 